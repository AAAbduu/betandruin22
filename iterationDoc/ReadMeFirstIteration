#ITERATION 1
For this iteration the following java classes have been included in the project or modified :

*DOMAIN PACKAGE*
1-User.java
2-Fee.java
*DOMAIN PACKAGE*

*EXCEPTIONS PACKAGE*
1-EventAlreadyExistException.java
2-UserIsUnderageException.java
*EXCEPTIONS PACKAGE*

*GUI PACKAGE*
1-AdminViewGUI.java
2-CreateNewEventGUI.java
3-LoginGUI.java
4-RegisterGUI.java
5-SetFee4QuestionGUI.java
6-UserViewGUI.java
*GUI PACKAGE*

*BUSINESSLOGIC PACKAGE*
1-BlFacade.java
2.BlFacadeImplementation.java
*BUSINESSLOGIC PACKAGE*


*DATAACCESS PACKAGE*
1-DataAccess.java
*DATAACCESS PACKAGE*


#Changes or implementations:

*DOMAIN PACKAGE*

1-User is a class which describes a user registered in Bet&Ruin application.
It has been added to the database as an entity.

2-Fee is a class which describes a single fee designated by an administrator for a question 
in an event.
I has also been added to the database as an entity but also as a Vector object
in the Question.java class in order to have multiple fees associated with a single
Question object.

*DOMAIN PACKAGE*

*EXCEPTIONS PACKAGE*

1-This Exception may be thrown if an administrator tries to add an already existing event
into the database, it is trigger if the description and date of the event matches with
an already existing event.

2-This Exception may be thrown if an unregistered user is trying to register himself/herself
but introduces a date of birth which indicate they are minors.

*EXCEPTIONS PACKAGE*


*GUI PACKAGE*

For the GUI classes, depending on the identification the user performs, some options are available
or others.
If identified as an administrator, we will have the following flow:

MainGUI -> 
			LoginGUI -> 
						AdminViewGUI ->
										SetFee4QuestionGUI
										CreateNewQuestionGUI
										CreateNewEventGUI
										BrowseQuestionsGUI

An non-registered user will have the following flow:

MainGUI ->
			RegisterGUI

Once registered, he/she will become a user of Bet&Ruin and will have the following flow:

MainGUI -> 
			LoginGUI -> 
						UserViewGUI ->
										BrowseQuestionsGUI
						
*GUI PACKAGE*



*BUSINESSLOGIC PACKAGE*

As every class has an attribute for a BlFacade object type, when an iteration needs to be done with the DB
the business layer is in charge of doing it, so for everything needed to be added in the DB, new classes mainly
and some new functionality like adding a new event or setting fees for a question.
BlFacade has some new methods declared as for the new transactions needed, and BlFacadeImplementation has them
implemented.

*BUSINESSLOGIC PACKAGE*



*DATAACCESS PACKAGE*

The DataAccess class is in charge with direct communication with the database, that is why all persistance,
updating and checkings are done. Mainly it has implemented some new functions which persist new objects,
update other and checks for existance with JPA type queries.

*DATAACCESS PACKAGE*


Other comments:
Maven was used for all the needed dependencies.

Swing has been used so far.

Eclipse has been used so far and hopefully no more.

